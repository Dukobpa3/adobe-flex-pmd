<?xml version="1.0" encoding="utf-8"?>
<!--

       Copyright (c) 2009, Adobe Systems, Incorporated
       All rights reserved.

       Redistribution  and  use  in  source  and  binary  forms, with or without
       modification,  are  permitted  provided  that  the  following  conditions
       are met:

         * Redistributions  of  source  code  must  retain  the  above copyright
           notice, this list of conditions and the following disclaimer.
         * Redistributions  in  binary  form  must reproduce the above copyright
           notice,  this  list  of  conditions  and  the following disclaimer in
           the    documentation   and/or   other  materials  provided  with  the
           distribution.
         * Neither the name of the Adobe Systems, Incorporated. nor the names of
           its  contributors  may be used to endorse or promote products derived
           from this software without specific prior written permission.

       THIS  SOFTWARE  IS  PROVIDED  BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
       "AS IS"  AND  ANY  EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING,  BUT NOT
       LIMITED  TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
       PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
       OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL,
       EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED TO,
       PROCUREMENT  OF  SUBSTITUTE   GOODS  OR   SERVICES;  LOSS  OF  USE,  DATA,
       OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
       LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY, OR TORT (INCLUDING
       NEGLIGENCE  OR  OTHERWISE)  ARISING  IN  ANY  WAY  OUT OF THE USE OF THIS
       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<mx:Canvas> 
	
	<mx:Script>
		<![CDATA[
		
		// Handle the mouseDown event generated 
		// by clicking in the application.
		private function handleMouseDown(event:MouseEvent):void {
		
		// Convert the mouse position to global coordinates.
		// The localX and localY properties of the mouse event contain
		// the coordinates at which the event occurred relative to the
		// event target, typically one of the 
		// colored internal Canvas controls.
		// A production version of this example could use the stageX 
		// and stageY properties, which use the global coordinates, 
		// and avoid this step.
		// This example uses the localX and localY properties only to
		// illustrate conversion between different frames of reference.
		var pt:Point = new Point(event.localX, event.localY);
		pt = event.target.localToGlobal(pt);
		
		// Convert the global coordinates to the content coordinates 
		// inside the outer c1 Canvas control.
		pt = c1.globalToContent(pt);
		
		// Figure out which quadrant was clicked.
		var whichColor:String = "border area";
		
		if (pt.x < 150) {
		if (pt.y < 150)
		whichColor = "red";
		else
		whichColor = "blue";
		}
		else {
		if (pt.y < 150)
		whichColor = "green";
		else
		whichColor = "magenta";
		}
		
		Alert.show("You clicked on the " + whichColor);
		}
		
		// Handle the mouseDown event generated 
		// by clicking in the application.
		private function handleMouseDown(event:MouseEvent):void {
		
		// Convert the mouse position to global coordinates.
		// The localX and localY properties of the mouse event contain
		// the coordinates at which the event occurred relative to the
		// event target, typically one of the 
		// colored internal Canvas controls.
		// A production version of this example could use the stageX 
		// and stageY properties, which use the global coordinates, 
		// and avoid this step.
		// This example uses the localX and localY properties only to
		// illustrate conversion between different frames of reference.
		var pt:Point = new Point(event.localX, event.localY);
		pt = event.target.localToGlobal(pt);
		
		// Convert the global coordinates to the content coordinates 
		// inside the outer c1 Canvas control.
		pt = c1.globalToContent(pt);
		
		// Figure out which quadrant was clicked.
		var whichColor:String = "border area";
		
		if (pt.x < 150) {
		if (pt.y < 150)
		whichColor = "red";
		else
		whichColor = "blue";
		}
		else {
		if (pt.y < 150)
		whichColor = "green";
		else
		whichColor = "magenta";
		}
		
		Alert.show("You clicked on the " + whichColor);
		}
		]]>
	</mx:Script>
	
</mx:Canvas>
