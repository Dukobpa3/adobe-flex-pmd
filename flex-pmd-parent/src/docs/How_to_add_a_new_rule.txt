====
       Copyright (c) 2008. Adobe Systems Incorporated.
       All rights reserved.

       Redistribution and use in source and binary forms, with or without
       modification, are permitted provided that the following conditions
       are met:

         * Redistributions of source code must retain the above copyright
           notice, this list of conditions and the following disclaimer.
         * Redistributions in binary form must reproduce the above copyright
           notice, this list of conditions and the following disclaimer in
           the documentation and/or other materials provided with the
           distribution.
         * Neither the name of Adobe Systems Incorporated nor the names of
           its contributors may be used to endorse or promote products derived
           from this software without specific prior written permission.

       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
       PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
       OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
       EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
       PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
       PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
       LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
       NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
====
To add a rule, all you will need to do is modifying the flex-pmd-ruleset project.
If you need to add a new resource in order to test your rule, please add it in the flex-pmd-test-resources/src/test/resources folder. Your resource will be detected in the flex-pmd-ruleset project.
 
H1. How to add a new Rule in the AcRuleSet
 
You will have to answer two questions before creating it:
- Will my rule be about As file, MXML file or both?
- Can my rule be detected only by a regular expression?
- Do you have to visit the Abstract Synthax Tree (AST) to detect the violation?
 
Depending on your answer to the first question, you will create your rule/test into the correct package:
com.adobe.ac.pmd.rules.as3
com.adobe.ac.pmd.rules.mxml
com.adobe.ac.pmd.rules.common
 
If you answered yes to the second question, you are lucky: your rule will be more lightweight.
 
H2. A violation can be detected by a regular expression:
 
# Create a new test case for testing your rule. Make this test case extending AbstractTestRegExpBasedRule.
# Implements the required abstract methods.
# Create a new class whose name is ending by Rule, and which extends AbstractRegexpBasedRule: You will have to create a constructor and to implement four abstract methods
# Specify the default violation priority.
# Specify whether the current rule is concerned by the given file (typically "file.isMxml()" or "file.getClassName().endsWith( 'Event.as' )" )
# Specify the regular expression which will match the line which could contain a violation. The Java regexp is slightly different: your regexp has to match the entire line (by adding .* at the beginning and at the end). You can also use regexp groups if you need to (see TooLongBindingExpressionRule for an example)
# Specify when to add a violation if the regexp matches the current line (see TooLongBindingExpressionRule for an example).
# Run the unit-tests for the flex-pmd-ruleset project

H2. A violation cannot be detected by a regular expression but can be by visiting the AST:

# Create a new test case for testing your rule. Make this test case extending AbstractTestASTRule.
# Implements the required abstract methods.
# Create a new class whose name is ending by Rule, and which extends AbstractASTRule: You will have to create a constructor and to implement four abstract methods
# Specify the default violation priority.
# Specify whether the current rule is concerned by the given file (typically "file.isMxml()" or "file.getClassName().endsWith( 'Event.as' )" )
# if the violation can be computed from the package node, you can override the findViolationsFromPackageNode method.
# Otherwise override any visitX methods and detect your violation according to the current node content (see AvoidInstanciationInLoop, or EmptyIfStmt rules) 
# Run the unit-tests for the flex-pmd-ruleset project

H2. A violation cannot be detected by either a regexp or a AST visit:

# Create a new test case for testing your rule. Make this test case extending AbstractTestFlexRule.
# Implements the required abstract methods.
# Specify the default violation priority.
# Create a new class whose name is ending by Rule, and which extends AbstractFlexRule: You will have to create a constructor and to implement two abstract methods
# Implements the processFile method on your own.
# Run the unit-tests for the flex-pmd-ruleset project
 
H1. Last step
 
Only when all your tests pass, add a reference of your rule to the RulesSet description which is in
/flex-pmd-ruleset/src/main/resources/com/adobe/ac/pmd/rulesets

# Update the relevant ruleset to include you newly created rule.
# Run the unit-tests for the flex-pmd-ruleset-core project.

Check the code in if you can, otherwise submit a patch.
 
H1. Before committing
 
Launch PMD in FlexPMD  using the eclipse plugin.
