<?xml version="1.0"?>
<ruleset name="Cairngorm Rules" xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
	<description>
      The Cairngorm Ruleset contains a collection of good practices related to Cairngorm.
    </description>
	<rule class="com.adobe.ac.pmd.rules.cairngorm.BindableModelLocatorRule"
		message="A modelLocator must not be Bindable at a class level">
		<description>A bindable ModelLocator could leads to performance issues due to bindings</description>
		<priority>1</priority>
		<example>
   [Bindable]
   public class BindableModelLocator // VIOLATION 
   {      
   }      
      </example>
	</rule>
	<rule
		class="com.adobe.ac.pmd.rules.cairngorm.ReferenceModelLocatorOutsideTheMainApplicationRule"
		message="The ModelLocator should be only accessible from the main application file">
		<description>The ModelLocator should be only accessible from the main application file. Then sub-models should be injected to the nested views.</description>
		<priority>3</priority>
		<example>
package business
{
   import model.MyModelLocator; // VIOLATION
   
   public class MyBusinessClass 
   {
   } 
}
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.cairngorm.FatControllerRule"
		message="A FrontController must nor add all its commands within the Controller constructor.">
		<description>Try split them into methods where you add commands depending on their fonctional area.</description>
		<priority>3</priority>
		<example>
package control
{
   import control.GetItems1Command;
   import control.GetItems1Event;
   import control.GetItems2Command;
   import control.GetItems2Event;
   // A lot of other imports
   
   public class MyFrontController // VIOLATION
   {
      public function MyFrontController()
      {
         addCommand( 
            GetItems1Event.EVENT_NAME,
            GetItems1Command );

         addCommand( 
            GetItems2Event.EVENT_NAME,
            GetItems2Command );

         // A lot of other addCommand
      }
   } 
}
      </example>
	</rule>
	<rule
		class="com.adobe.ac.pmd.rules.cairngorm.BadCairngormEventNameFormatRule"
		message="A Cairngorm event name should contain the function area name before the actual event name">
		<description>You would have something like 'productManagement.getProducts' as an event name.</description>
		<priority>3</priority>
		<example>
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.cairngorm.CairngormEventDispatcherCallExplicitlyRule"
		  message="CairngormEventDispatcher is called explicitly. {0}">
	</rule>
</ruleset>
