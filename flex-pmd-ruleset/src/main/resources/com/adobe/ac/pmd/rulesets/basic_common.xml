<?xml version="1.0"?>
<ruleset name="Basic Common Flex Rules" xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

	<description>
      The Basic As3/MXML Ruleset contains a collection of good practices which everyone should follow.
  </description>

	<rule class="com.adobe.ac.pmd.rules.event.DispatchHardCodedEventNameRule"
		message="DispatchEvent function must dispatch constant strings">
		<description>You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</description>
		<priority>3</priority>
		<example>
   public class Foo 
   {
      public function bar() : void
      {
         dispatch( new Event( "myHardCodedEvent" ) ); // VIOLATION
      }
   }
      </example>
	</rule>
	<rule
		class="com.adobe.ac.pmd.rules.event.ListenForHardCodedEventNameRule"
		message="addEventListener must not contain hard coded strings.">
		<description>You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</description>
		<priority>3</priority>
		<example>
   public class Foo 
   {
      public function bar() : void
      {
         addEventListener( "myHardCodedEvent", handleMyHardCodedEvent ); // VIOLATION
      }
   }      
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.maintanability.AlertShowRule" message="Do not call Alert.show directly.">
		<description>You should not Alert.show() directly. If an error occured in the system, you should probably use an ErrorManager to have a consistent way to manage those errors.</description>
		<priority>1</priority>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.empty.EmptyIfStmtRule"
		message="No statements in this if statement">
		<description>Empty If Statement finds instances where a condition is checked but nothing is done about it. </description>
		<priority>3</priority>
		<example>
   public class Foo 
   {
      public function bar( x : int ) : void
      {
         if ( x == 0 ) 
         {
            // VIOLATION
         }
      }
   } 
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.maintanability.ExcessiveImportRule"
		message="A high number of imports can indicate a high degree of coupling within an object. ({0} maximum but {1} actually)">
		<description>A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.</description>
		<priority>3</priority>
		<properties>
			<property name="maximum">
				<value>15</value>
			</property>
		</properties>
		<example>
   import blah.blah.Baz;
   import blah.blah.Bif;
   // 18 others from the same package elided
   public class Foo 
   {
      public function doWork() : void 
      {
      }
   }
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.binding.BindingUtilsRule"
		message="If you need to use BindingUtils, you should probably consider refactoring using events">
		<description></description>
		<priority>1</priority>
		<example>
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.style.OverLongLineRule"
		message="Too long line ({0} maximum, but {1} actually)">
		<description></description>
		<priority>5</priority>
		<properties>
			<property name="maximum">
				<value>200</value>
			</property>
		</properties>
		<example>
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.style.ImportFromSamePackageRule"
		message="Imports from the same package are not necessary">
		<description></description>
		<priority>1</priority>
		<example>
package com.adobe.ac
{
   import com.adobe.ac.MyModel; // VIOLATION HERE

   public class BigModel   
   {
      public var model : MyModel = null;
   }
}         
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.naming.UncorrectClassCase"
		message="A class name must start by a majuscule character">
		<description></description>
		<priority>3</priority>
		<example>
   public class foo
   {
   }      
      </example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.component.CallLaterDirectlyRule"
		message="Don't call 'callLater' explicitly">
		<description>If you needed to call 'callLater' explicitly, then you probably did not extend the correct component lifecycle.</description>
		<priority>1</priority>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.maintanability.AvoidHavingTwoClassWithTheSameNameRule"
		message="Another file with the same class name exist in the source path">
		<priority>3</priority>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.style.CopyrightMissingRule"
		message="The copyright header is missing in this file">
		<priority>5</priority>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.naming.WronglyNamedVariableRule"
		message="This variable ({0}) seems to be incorrectly named. Let your creativity flow.">
		<priority>3</priority>	
	</rule>
	<rule class="com.adobe.ac.pmd.rules.binding.ChangeWatcherRule"
		message="ChangeWatcher class uses hard coded strings to specify the attribute name, to listen to. Prefer listening to events or setters">
		<priority>1</priority>	
	</rule>
</ruleset>
